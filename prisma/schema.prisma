// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//enum
enum ChatsType {
  private
  teams
}

enum ProjectStatus {
  pending
  active
  warning
  danger
  success
}

//model
model Users {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String?   @unique
  password      String
  isOnline      Boolean
  lastActive    DateTime
  avatar        String?
  phone         String?   @unique
  emailVerified DateTime?
  bg_image      String?

  //relations
  Followers     Follows[]       @relation("UserFollowers")
  Followings    Follows[]       @relation("UserFollowings")
  Team          Teams[]
  Project       Projects[]
  Chat          Chats[]         @relation("UserChats")
  Messages      Messages[]
  Notifications Notifications[]
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expiresAt                Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     Users?  @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expiresAt    DateTime
  user         Users    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expiresAt  DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Follows {
  id             String   @id @default(cuid())
  isMutualFollow Boolean  @default(false)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  //foreign
  followerId  String
  followingId String

  //relations
  Followers  Users @relation("UserFollowers", fields: [followerId], references: [id])
  Followings Users @relation("UserFollowings", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Teams {
  id         String   @id @default(cuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  //foreign
  authorId String

  //relations
  Author Users     @relation(fields: [authorId], references: [id])
  Member Members[]
  Chats  Chats[]
}

model Members {
  id    String @id @default(cuid())
  name  String
  email String

  //foreign
  teamId String

  //relation
  Team Teams @relation(fields: [teamId], references: [id])
}

model Projects {
  id         String   @id @default(cuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  //foreign
  authorId String

  //relations
  authors Users      @relation(fields: [authorId], references: [id])
  Facture Factures[]
}

model Factures {
  id         String        @id @default(cuid())
  name       String
  start_at   DateTime
  end_at     DateTime
  status     ProjectStatus @default(pending)
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt

  //foreign
  projectId String

  //relations
  Project Projects @relation(fields: [projectId], references: [id])
}

model Chats {
  id         String    @id @default(cuid())
  type       ChatsType @default(private)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  //foreign
  teamId String?

  //relations
  participants Users[]    @relation("UserChats")
  Team         Teams?     @relation(fields: [teamId], references: [id])
  Message      Messages[]
}

model Messages {
  id          String   @id @default(cuid())
  content     String
  isDelivered Boolean  @default(false)
  isRead      Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  //foreign
  chatId   String
  authorId String

  //relations
  Chat   Chats @relation(fields: [chatId], references: [id])
  Author Users @relation(fields: [authorId], references: [id])
}

model Notifications {
  id        String   @id @default(cuid())
  userId    String // User yang menerima notifikasi
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  User Users @relation(fields: [userId], references: [id])
}
